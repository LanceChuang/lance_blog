<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lance Wonderland</title>
    <link>http://lancechuang.github.io/lance_blog/post/</link>
    <description>Recent content in Posts on Lance Wonderland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 -0800</lastBuildDate>
    
	<atom:link href="http://lancechuang.github.io/lance_blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>394. Decode String - Google Amazon Bloomberg Oracle</title>
      <link>http://lancechuang.github.io/lance_blog/post/2018-08-26/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 -0700</pubDate>
      
      <guid>http://lancechuang.github.io/lance_blog/post/2018-08-26/</guid>
      <description>題目來自Leetcode
演算法  stack想法：
  stack用來存數字、[、以及當有上引號存在stack中時就存英文字母，否則就把英文字母存在結果字串就好 當loop到數字時，因為數字可能有好幾個位數，所以先用變數去存，當碰到 &amp;lsquo;[&amp;rsquo; 時，再把數字先存到stack，接著也存&amp;rsquo;[&amp;lsquo;， 記得將用來存數字的變數清空 當碰到 &amp;lsquo;]&amp;rsquo; 時，開始將括號裡的內容物也就是存在stack的東西pop出來 直到碰到 &amp;lsquo;[&amp;rsquo; 為止，將 &amp;lsquo;[&amp;rsquo; 前面跟的數字對目前引號提出的字母做乘積，做完後由於可能是巢狀結構，像是範例二，所以當stack還有 &amp;lsquo;[&amp;rsquo; 表示是巢狀結構，就要再把目前做完的字母丟回stack，沒有的話就接到結果字串後面  Code def decodeString(self, s): &amp;quot;&amp;quot;&amp;quot; :type s: str :rtype: str &amp;quot;&amp;quot;&amp;quot; if not s: return &amp;quot;&amp;quot; stack, res = [], &amp;quot;&amp;quot; nums = &amp;quot;&amp;quot; for char in s: if char.isdigit(): nums += char elif char == &amp;quot;[&amp;quot;: stack.append(nums) stack.append(char) nums = &amp;quot;&amp;quot; elif &amp;quot;[&amp;quot; in stack and char.</description>
    </item>
    
    <item>
      <title>Academic: the website designer for Hugo</title>
      <link>http://lancechuang.github.io/lance_blog/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 -0700</pubDate>
      
      <guid>http://lancechuang.github.io/lance_blog/post/getting-started/</guid>
      <description>Academic is a framework to help you create a beautiful website quickly. Perfect for personal sites, blogs, or business/project sites. Check out the latest demo of what you&amp;rsquo;ll get in less than 10 minutes. Then head on over to the Quick Start guide or take a look at the Release Notes.

Key features:
 Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.</description>
    </item>
    
  </channel>
</rss>