[{"authors":null,"categories":null,"content":" Description  Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizesthe sum of all numbers along its path. Note: You can only move either down or right at any point in time. Example: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the sum.\n  0 / \\ -3 9 / / -10 5  DP想法:\n和62相似，這次每個路徑都會有weight，然後要找加總weight最小的\nAlgorithm: 1. Init: 將邊界值先加總 2. 令dp[i][j]為走到點i, j的最小權重總和 加上該點grid值 -\u0026gt; dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]  1D DP想法：\n用一條和cols數相同長度的array，先算好columns的邊界值 每次跑row時邊界值一樣先算好，接著再算出該相應col的dp\nCode: https://repl.it/@Ren_HauChuang/64-Minimum-Path-Sum\n","date":1538895600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538931600,"objectID":"311de2f7cd28b6691f1d9ef52f224eef","permalink":"http://lancechuang.github.io/lance_blog/post/2018-10-07/","publishdate":"2018-10-07T00:00:00-07:00","relpermalink":"/lance_blog/post/2018-10-07/","section":"post","summary":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizesthe sum of all numbers along its path.","tags":["Leetcode","Data Structure","Algorithms","Linked List","Tree"],"title":"Minimum Path Sum","type":"post"},{"authors":null,"categories":null,"content":" Description  Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST. For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. Example: Given the sorted linked list: [-10,-3,0,5,9], One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n  0 / \\ -3 9 / / -10 5  想法：\n和108 Convert Sorted Array to Binary Search Tree 相似， 但是List無法直接透過index查找，概念一樣是從中間切一半，用快慢指針找到中間點，並要記錄slow前面一個node, 找到中點後以中點建立根節點root，接著把List斷開，左右兩邊的List都不包含中點，在對兩邊做遞迴 讓root連上左右兩邊 因為左邊部分做到最後會是slow == head，要另外設條件說當recursion做到這裡後，要停 止，右邊因為base case已經有 not head的狀況，所以不用額外再處理了\nCode:\n# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def sortedListToBST(self, head): \u0026quot;\u0026quot;\u0026quot; :type head: ListNode :rtype: TreeNode \u0026quot;\u0026quot;\u0026quot; if not head: return None if not head.next: return TreeNode(head.val) # 用快慢指針找到中點並切斷分為左右子樹 prev = slow = fast = head while fast and fast.next: prev = slow slow = slow.next fast = fast.next.next second = slow.next prev.next = None current = TreeNode(slow.val) # if head != slow: # head == slow: 表示左邊沒了 current.left = self.sortedListToBST(head) current.right = self.sortedListToBST(second) return current  ","date":1538290800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538326800,"objectID":"1727fdd0f41d89c2fe2ae8212827fdec","permalink":"http://lancechuang.github.io/lance_blog/post/2018-09-30/","publishdate":"2018-09-30T00:00:00-07:00","relpermalink":"/lance_blog/post/2018-09-30/","section":"post","summary":"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.","tags":["Leetcode","Data Structure","Algorithms","Linked List","Tree"],"title":"Convert Sorted List to Binary Search Tree","type":"post"},{"authors":null,"categories":null,"content":" Description Given an array of integers, find how many unique pairs in the array such that their sum is equal to a specific target number. Please return the number of pairs. Example Given nums = [1,1,2,45,46,46], target = 47 return 2 1 + 46 = 47 2 + 45 = 47  想法：要找到所有的不同組合，所以不能用一般hash的方式\n這邊使用 2 pointer解\n sort arry, 小的部分會在左邊，大的會在右邊 設定while條件為left \u0026lt; right，當兩個pointer指的數相加大於target，將右指針向內縮; 若小於target，則往右移動左指針 當pointer數加起來等於target，count ++, 左右指針向內縮，因為array有可能會有重複數字且題目是要unique pair，所以要做去重的動作： 若left指向的數和上個一樣，則再往右跑; 若right指向數和上個一樣，則向左跑  https://repl.it/@Ren_HauChuang/2-Sum-Unique-Pair-2sumBian-Hua\n","date":1536649200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536685200,"objectID":"275ddd7a7ae09b977a1f9592dcddab17","permalink":"http://lancechuang.github.io/lance_blog/post/2018-09-11/","publishdate":"2018-09-11T00:00:00-07:00","relpermalink":"/lance_blog/post/2018-09-11/","section":"post","summary":"find how many unique pairs in the array such that their sum is equal to a specific target number","tags":["Leetcode","Datastructure","two pointers"],"title":"2 Sum - Unique Pair","type":"post"},{"authors":null,"categories":null,"content":"  ls   stands for \u0026ldquo;list\u0026rdquo; lists the contents of a directory\n  ls -l   long listing format gives additional info of files, size, date of last exist\u0026hellip;.\n  ls -lh   long listing format + print human readable format\n  ls -lSh   sorted by the size and then by the date of exist time\n  ls [another directory]\n cd\n   change directory\n  pwd   print whole pathname of current directory\n  du   displays the disk space used by files\n  df   reports amounts of available disk space being used by file systems\n  man: manual   view system\u0026rsquo;s manuals\n  mkdir   make directory\n  cp   makes copies of files cp SOURCE DIRECTORY\ncp -r\ncopy a whole objects in a directory or folder recursively\n  mv  move or rename files\n mv SOURCE DIRECTORY\n  touch   change file timestamp\n  cat   displays the contents of a file copies or appends text files into document\n  head   prints the first part of files default is 10 lines, so we can specify the number by adding like -4 between command and file and then display 4 lines\n  tail   prints last part of files\n  more   preview content without reading whole file and loading it into memory\n  less   displays text, allowing scrolling\n  wc   \u0026ldquo;word count\u0026rdquo; prints count of lines\n  grep   \u0026ldquo;global regular expression print\u0026rdquo; process text and prints any lines which match a specified pattern\n  grep PATTERN FILE   cut   drops sections of each line of a file\n  cut FILE cut -d \u0026quot; \u0026quot; -f1 FILE // set the space symbol as delimiter and print out first field of file   tr   translate one set of character to another (replace)\n tr [-Ccsu] str1 str2 cat file.txt | tr ' ' '.'   sort   sorts the content\n  awk   interpreted programming language text processing\n Operators  \u0026gt;   overwrites the file with the content if it exists or creates it if not exists\n  \u0026gt;\u0026gt;   appends to a file\n  |   pipe operator, output of first command acts as an input to the second command\n Commands for processes managing  free   displays total amount of free and used memory\n \u0026gt; free -g # print file sizes in gigabytes   top   provides a dynamic real-time view of a running system\n ","date":1535526000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535562000,"objectID":"6c2387b8d2889b5bd63697f81eb2f8ad","permalink":"http://lancechuang.github.io/lance_blog/post/2018-08-29/","publishdate":"2018-08-29T00:00:00-07:00","relpermalink":"/lance_blog/post/2018-08-29/","section":"post","summary":"Basic command line","tags":["Command Line","Bash"],"title":"Unix Command Line","type":"post"},{"authors":null,"categories":null,"content":"","date":1461740400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461740400,"objectID":"553a94c5dfd3b8b099d8a12b2d248093","permalink":"http://lancechuang.github.io/lance_blog/project/example-external-project/","publishdate":"2016-04-27T00:00:00-07:00","relpermalink":"/lance_blog/project/example-external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Developed a User-based Collaborative Filtering Algorithm with Spark to help recommend suitable movies to customers. By doing so, I discovered frequent movie item sets by implementing Apriori and SON Algorithms.\nA-priori Algorithm is used for frequent item set mining and association rule learning. It proceeds by identifying the frequent individual items in the database and extending them to larger and larger item sets as long as those item sets appear sufficiently often in the database.\nFor example: There is a transaction itemsets record looks like as below:\n Itemsets {1,2,3,4} {1,2,4} {1,2} {2,3,4} {2,3} {3,4} {2,4}    Item Support   {1} 3   {2} 6   {3} 4   {4} 5   All the itemsets of size 1 have a support of at least 3, so they are all frequent.\nWhen size becomes bigger, our support will change as well.\n  {1,2} 3   {1,3} 3   {1,4} 2   {2,3} 3   {2,4} 4   {3,4} 3   We have thus determined the frequent sets of items in the database, and illustrated how some items were not counted because one of their subsets was already known to be below the threshold.\nThe power of this is:\nYou can find those items that tend to be purchased together more frequently than other items — the ultimate goal being to get shoppers to buy more. Together, these items are called itemsets. Skillset: Python, Spark, Hadoop\n","date":1461740400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461740400,"objectID":"cd3f11e0858fea1acbfeccd7cd499b6d","permalink":"http://lancechuang.github.io/lance_blog/project/movie-recommendation/","publishdate":"2016-04-27T00:00:00-07:00","relpermalink":"/lance_blog/project/movie-recommendation/","section":"project","summary":"Discover the potential value of movie and its ranking from each person.","tags":["Data Mining","Machine Learning"],"title":"Movie Recommendation","type":"project"},{"authors":null,"categories":null,"content":" 題目來自Leetcode\n題目  The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer. You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won\u0026rsquo;t be input like 3a or 2[4]. s = \u0026ldquo;3[a]2[bc]\u0026ldquo;, return \u0026ldquo;aaabcbc\u0026rdquo;. s = \u0026ldquo;3[a2[c]]\u0026ldquo;, return \u0026ldquo;accaccacc\u0026rdquo;. s = \u0026ldquo;2[abc]3[cd]ef\u0026rdquo;, return \u0026ldquo;abcabccdcdcdef\u0026rdquo;.\n stack想法：  stack用來存數字、[、以及當有上引號存在stack中時就存英文字母，否則就把英文字母存在結果字串就好 當loop到數字時，因為數字可能有好幾個位數，所以先用變數去存，當碰到 \u0026lsquo;[\u0026rsquo; 時，再把數字先存到stack，接著也存\u0026rsquo;[\u0026lsquo;， 記得將用來存數字的變數清空 當碰到 \u0026lsquo;]\u0026rsquo; 時，開始將括號裡的內容物也就是存在stack的東西pop出來 直到碰到 \u0026lsquo;[\u0026rsquo; 為止，將 \u0026lsquo;[\u0026rsquo; 前面跟的數字對目前引號提出的字母做乘積，做完後由於可能是巢狀結構，像是範例二，所以當stack還有 \u0026lsquo;[\u0026rsquo; 表示是巢狀結構，就要再把目前做完的字母丟回stack，沒有的話就接到結果字串後面  Code def decodeString(self, s): \u0026quot;\u0026quot;\u0026quot; :type s: str :rtype: str \u0026quot;\u0026quot;\u0026quot; if not s: return \u0026quot;\u0026quot; stack, res = [], \u0026quot;\u0026quot; nums = \u0026quot;\u0026quot; for char in s: if char.isdigit(): nums += char elif char == \u0026quot;[\u0026quot;: stack.append(nums) stack.append(char) nums = \u0026quot;\u0026quot; elif \u0026quot;[\u0026quot; in stack and char.isalpha(): stack.append(char) elif char == \u0026quot;]\u0026quot;: current = \u0026quot;\u0026quot; # tackle the char in [] while stack[-1] != \u0026quot;[\u0026quot;: current = stack.pop() + current stack.pop() # pop out [ current *= int(stack.pop()) # if still has [ in stack, then push back the current chars in stack if \u0026quot;[\u0026quot; in stack: stack.extend(current[:]) else: res += current else: res += char return res  ","date":1461135600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515830400,"objectID":"13618e49db0d098cb94150480012969e","permalink":"http://lancechuang.github.io/lance_blog/post/2018-08-26/","publishdate":"2016-04-20T00:00:00-07:00","relpermalink":"/lance_blog/post/2018-08-26/","section":"post","summary":"Given an encoded string, return it's decoded string.","tags":["Leetcode","Data Structure","Algorithms"],"title":"394. Decode String - Google Amazon Bloomberg Oracle","type":"post"},{"authors":[],"categories":null,"content":" Academic is a framework to help you create a beautiful website quickly. Perfect for personal sites, blogs, or business/project sites. Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes. Then head on over to the Quick Start guide or take a look at the Release Notes.\n\nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n       Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461135600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515830400,"objectID":"ba6423d815d4f5949b7a69912feb741d","permalink":"http://lancechuang.github.io/lance_blog/post/getting-started/","publishdate":"2016-04-20T00:00:00-07:00","relpermalink":"/lance_blog/post/getting-started/","section":"post","summary":"Create a beautifully simple website or blog in under 10 minutes.","tags":["Academic"],"title":"Academic: the website designer for Hugo","type":"post"}]